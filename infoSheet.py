# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'infoSheet.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import init


class Ui_infoSheet(object):
    def infoSheet(self):
        self.window2 = QtWidgets.QMainWindow()
        self.ui = Ui_infoSheet()
        self.ui.setupUi(self.window2)
        self.window2.show()
    def notes(self):
        from notes import Ui_notes
        self.window2 = QtWidgets.QMainWindow()
        self.ui = Ui_notes()
        self.ui.setupUi(self.window2)
        self.window2.show()
    '''def saves(self):
        self.window2 = QtWidgets.QMainWindow()
        self.ui = Ui_saves()
        self.ui.setupUi(self.window2)
        self.window2.show()'''
    def charaSheet(self):
        from charaSheet import Ui_charaSheet
        self.window2 = QtWidgets.QMainWindow()
        self.ui = Ui_charaSheet()
        self.ui.setupUi(self.window2)
        self.window2.show()
    def setupUi(self, infoSheet):
        infoSheet.setObjectName("infoSheet")
        infoSheet.resize(1200, 431)
        font = QtGui.QFont()
        font.setPointSize(10)
        infoSheet.setFont(font)
        self.centralwidget = QtWidgets.QWidget(infoSheet)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(0, 10, 81, 371))
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.toSheet = QtWidgets.QPushButton(self.groupBox)
        self.toSheet.setGeometry(QtCore.QRect(10, 10, 61, 61))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.toSheet.setFont(font)
        self.toSheet.setObjectName("toSheet")
        self.toSheet.clicked.connect(self.saveProfs)
        self.toSheet.clicked.connect(self.charaSheet)
        self.toSheet.clicked.connect(infoSheet.close)
        self.doNothing2 = QtWidgets.QPushButton(self.groupBox)
        self.doNothing2.setGeometry(QtCore.QRect(10, 100, 61, 61))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.doNothing2.setFont(font)
        self.doNothing2.setObjectName("doNothing2")
        self.doNothing2.clicked.connect(self.saveProfs)
        self.toNotes = QtWidgets.QPushButton(self.groupBox)
        self.toNotes.setGeometry(QtCore.QRect(10, 190, 61, 61))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.toNotes.setFont(font)
        self.toNotes.setObjectName("toNotes")
        self.toNotes.clicked.connect(self.saveProfs)
        self.toNotes.clicked.connect(self.notes)
        self.toNotes.clicked.connect(infoSheet.close)
        self.toSaves = QtWidgets.QPushButton(self.groupBox)
        self.toSaves.setGeometry(QtCore.QRect(10, 280, 61, 61))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.toSaves.setFont(font)
        self.toSaves.setObjectName("toSaves")
        self.toSaves.clicked.connect(self.saveProfs)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(110, 10, 150, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(90, 50, 200, 20))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(90, 80, 200, 20))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(90, 110, 200, 20))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(90, 140, 200, 20))
        self.label_5.setObjectName("label_5")
        self.raceSenses = QtWidgets.QTextBrowser(self.centralwidget)
        self.raceSenses.setGeometry(QtCore.QRect(90, 160, 240, 51))
        self.raceSenses.setObjectName("raceSenses")
        self.passiveWisPerc = QtWidgets.QLineEdit(self.centralwidget)
        self.passiveWisPerc.setGeometry(QtCore.QRect(260, 50, 71, 20))
        self.passiveWisPerc.setReadOnly(True)
        self.passiveWisPerc.setObjectName("passiveWisPerc")
        self.passiveIntInve = QtWidgets.QLineEdit(self.centralwidget)
        self.passiveIntInve.setGeometry(QtCore.QRect(260, 80, 71, 20))
        self.passiveIntInve.setReadOnly(True)
        self.passiveIntInve.setObjectName("passiveIntInve")
        self.passiveWisInsi = QtWidgets.QLineEdit(self.centralwidget)
        self.passiveWisInsi.setGeometry(QtCore.QRect(260, 110, 71, 20))
        self.passiveWisInsi.setReadOnly(True)
        self.passiveWisInsi.setObjectName("passiveWisInsi")
        self.levelType = QtWidgets.QComboBox(self.centralwidget)
        self.levelType.setGeometry(QtCore.QRect(340, 10, 120, 30))
        self.levelType.setObjectName("levelType")
        self.levelType.addItem("")
        self.levelType.addItem("")
        self.levelType.addItem("")
        self.levelEnter = QtWidgets.QLineEdit(self.centralwidget)
        self.levelEnter.setGeometry(QtCore.QRect(340, 50, 91, 20))
        self.levelEnter.setObjectName("levelEnter")
        self.submitLevel = QtWidgets.QPushButton(self.centralwidget)
        self.submitLevel.setGeometry(QtCore.QRect(450, 50, 130, 30))
        self.submitLevel.setObjectName("submitLevel")
        self.xpTo = QtWidgets.QLabel(self.centralwidget)
        self.xpTo.setGeometry(QtCore.QRect(470, 10, 200, 30))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.xpTo.setFont(font)
        self.xpTo.setObjectName("xpTo")
        self.subraceSelect = QtWidgets.QComboBox(self.centralwidget)
        self.subraceSelect.setGeometry(QtCore.QRect(350, 90, 200, 30))
        self.subraceSelect.setObjectName("subraceSelect")
        self.subraceSelect.addItem("")
        self.bgSelect = QtWidgets.QComboBox(self.centralwidget)
        self.bgSelect.setGeometry(QtCore.QRect(350, 130, 200, 30))
        self.bgSelect.setObjectName("bgSelect")
        self.bgSelect.addItem("")
        self.bgSelect.addItem("")
        self.bgSelect.addItem("")
        self.bgSelect.addItem("")
        self.bgSelect.addItem("")
        self.bgSelect.addItem("")
        self.bgSelect.addItem("")
        self.bgSelect.addItem("")
        self.bgSelect.addItem("")
        self.bgSelect.addItem("")
        self.bgSelect.addItem("")
        self.bgSelect.addItem("")
        self.bgSelect.addItem("")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(600, 10, 190, 20))
        self.label_6.setObjectName("label_6")
        self.profBonusDisplay = QtWidgets.QLineEdit(self.centralwidget)
        self.profBonusDisplay.setGeometry(QtCore.QRect(630, 40, 85, 20))
        self.profBonusDisplay.setReadOnly(True)
        self.profBonusDisplay.setObjectName("profBonusDisplay")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(890, 10, 100, 20))
        self.label_7.setObjectName("label_7")
        self.initiativeDisplay = QtWidgets.QLineEdit(self.centralwidget)
        self.initiativeDisplay.setGeometry(QtCore.QRect(900, 40, 51, 20))
        self.initiativeDisplay.setReadOnly(True)
        self.initiativeDisplay.setObjectName("initiativeDisplay")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(990, 10, 190, 20))
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(990, 40, 190, 20))
        self.label_9.setObjectName("label_9")
        font = QtGui.QFont()
        font.setPointSize(10)
        self.rah = QtWidgets.QLabel(self.centralwidget)
        self.rah.setGeometry(QtCore.QRect(335, 190, 300, 30))
        self.rah.setFont(font)
        self.rah.setObjectName("rah")
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setGeometry(QtCore.QRect(150, 220, 190, 20))
        self.label_11.setObjectName("label_11")
        self.label_12 = QtWidgets.QLabel(self.centralwidget)
        self.label_12.setGeometry(QtCore.QRect(545, 220, 190, 20))
        self.label_12.setObjectName("label_12")
        self.label_13 = QtWidgets.QLabel(self.centralwidget)
        self.label_13.setGeometry(QtCore.QRect(360, 220, 100, 20))
        self.label_13.setObjectName("label_13")
        self.label_14 = QtWidgets.QLabel(self.centralwidget)
        self.label_14.setGeometry(QtCore.QRect(735, 220, 100, 20))
        self.label_14.setObjectName("label_14")
        self.armourProfs = QtWidgets.QTextBrowser(self.centralwidget)
        self.armourProfs.setGeometry(QtCore.QRect(90, 240, 190, 61))
        self.armourProfs.setObjectName("armourProfs")
        self.weaponProfs = QtWidgets.QTextBrowser(self.centralwidget)
        self.weaponProfs.setGeometry(QtCore.QRect(290, 240, 190, 61))
        self.weaponProfs.setObjectName("weaponProfs")
        self.toolProfs = QtWidgets.QTextBrowser(self.centralwidget)
        self.toolProfs.setGeometry(QtCore.QRect(490, 240, 190, 61))
        self.toolProfs.setObjectName("toolProfs")
        self.languages = QtWidgets.QTextBrowser(self.centralwidget)
        self.languages.setGeometry(QtCore.QRect(690, 240, 190, 61))
        self.languages.setObjectName("languages")
        self.perksDisplay = QtWidgets.QTextBrowser(self.centralwidget)
        self.perksDisplay.setGeometry(QtCore.QRect(890, 110, 290, 261))
        self.perksDisplay.setObjectName("perksDisplay")
        self.label_15 = QtWidgets.QLabel(self.centralwidget)
        self.label_15.setGeometry(QtCore.QRect(930, 80, 250, 30))
        self.label_15.setObjectName("label_15")
        self.bgInfo = QtWidgets.QTextBrowser(self.centralwidget)
        self.bgInfo.setGeometry(QtCore.QRect(570, 100, 310, 111))
        self.bgInfo.setObjectName("bgInfo")
        self.label_16 = QtWidgets.QLabel(self.centralwidget)
        self.label_16.setGeometry(QtCore.QRect(620, 70, 200, 30))
        self.label_16.setObjectName("label_16")
        self.label_17 = QtWidgets.QLabel(self.centralwidget)
        self.label_17.setGeometry(QtCore.QRect(780, 10, 90, 16))
        self.label_17.setObjectName("label_17")
        self.hitDiceDisplay = QtWidgets.QLineEdit(self.centralwidget)
        self.hitDiceDisplay.setGeometry(QtCore.QRect(780, 40, 90, 20))
        self.hitDiceDisplay.setObjectName("hitDiceDisplay")
        self.hitDiceDisplay.setReadOnly(True)
        self.inpArmo = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.inpArmo.setGeometry(QtCore.QRect(90, 310, 190, 64))
        self.inpArmo.setObjectName("inpArmo")
        self.inpWeap = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.inpWeap.setGeometry(QtCore.QRect(290, 310, 190, 64))
        self.inpWeap.setObjectName("inpWeap")
        self.inpTool = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.inpTool.setGeometry(QtCore.QRect(490, 310, 190, 64))
        self.inpTool.setObjectName("inpTool")
        self.inpLang = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.inpLang.setGeometry(QtCore.QRect(690, 310, 190, 64))
        self.inpLang.setObjectName("inpLang")
        infoSheet.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(infoSheet)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 861, 20))
        self.menubar.setObjectName("menubar")
        infoSheet.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(infoSheet)
        self.statusbar.setObjectName("statusbar")
        infoSheet.setStatusBar(self.statusbar)

        self.retranslateUi(infoSheet)
        self.start()
        self.loadProfs()
        self.bgSelect.activated.connect(self.bgSetup)
        self.submitLevel.clicked.connect(self.levelButt)
        self.subraceSelect.activated.connect(self.subraceFunctions)
        self.levelType.activated.connect(self.lvlTy)
        QtCore.QMetaObject.connectSlotsByName(infoSheet)

    def retranslateUi(self, infoSheet):
        _translate = QtCore.QCoreApplication.translate
        infoSheet.setWindowTitle(_translate("infoSheet", "Info Sheet"))
        self.toSheet.setText(_translate("infoSheet", "👤"))
        self.doNothing2.setText(_translate("infoSheet", "ⓘ"))
        self.toNotes.setText(_translate("infoSheet", "📖"))
        self.toSaves.setText(_translate("infoSheet", "💾"))
        self.label.setText(_translate("infoSheet", "Passive Senses"))
        self.label_2.setText(_translate("infoSheet", "WIS(Perception) :"))
        self.label_3.setText(_translate("infoSheet", "INT(Investigation) :"))
        self.label_4.setText(_translate("infoSheet", "WIS(Insight) :"))
        self.label_5.setText(_translate("infoSheet", "Race Specific Senses :"))
        self.levelType.setItemText(0, _translate("infoSheet", "Lvl Type"))
        self.levelType.setItemText(1, _translate("infoSheet", "XP"))
        self.levelType.setItemText(2, _translate("infoSheet", "Milestone"))
        self.submitLevel.setText(_translate("infoSheet", "Submit Level"))
        self.xpTo.setText(_translate("infoSheet", ""))
        self.subraceSelect.setItemText(0, _translate("infoSheet", "Subrace N/A"))
        self.bgSelect.setItemText(0, _translate("infoSheet", "Select Background"))
        self.bgSelect.setItemText(1, _translate("infoSheet", "Acolyte"))
        self.bgSelect.setItemText(2, _translate("infoSheet", "Charlatan"))
        self.bgSelect.setItemText(3, _translate("infoSheet", "Criminal"))
        self.bgSelect.setItemText(4, _translate("infoSheet", "Entertainer"))
        self.bgSelect.setItemText(5, _translate("infoSheet", "Folk Hero"))
        self.bgSelect.setItemText(6, _translate("infoSheet", "Guild Artisan"))
        self.bgSelect.setItemText(7, _translate("infoSheet", "Hermit"))
        self.bgSelect.setItemText(8, _translate("infoSheet", "Noble"))
        self.bgSelect.setItemText(9, _translate("infoSheet", "Outlander"))
        self.bgSelect.setItemText(10, _translate("infoSheet", "Sage"))
        self.bgSelect.setItemText(11, _translate("infoSheet", "Sailor"))
        self.bgSelect.setItemText(12, _translate("infoSheet", "Urchin"))
        self.label_6.setText(_translate("infoSheet", "Proficiency Bonus"))
        self.label_7.setText(_translate("infoSheet", "Initiative"))
        self.initiativeDisplay.setText(_translate("infoSheet", f"{init.dexMod}"))
        self.label_8.setText(_translate("infoSheet", f"Walking Speed {init.walkSpeed}ft"))
        self.label_9.setText(_translate("infoSheet", f"Armour Class {init.armourClass}"))
        self.rah.setText(_translate("infoSheet", "Proficiencies & Languages"))
        self.label_11.setText(_translate("infoSheet", "Armour"))
        self.label_12.setText(_translate("infoSheet", "Weapons"))
        self.label_13.setText(_translate("infoSheet", "Tools"))
        self.label_14.setText(_translate("infoSheet", "Languages"))
        self.label_15.setText(_translate("infoSheet", "Level Up & Class Perks"))
        self.label_16.setText(_translate("infoSheet", "Background Info"))
        self.label_17.setText(_translate("infoSheet", "Hit Dice"))
        self.passiveIntInve.setText(_translate("infoSheet", f"{init.passiveInve}"))
        self.passiveWisInsi.setText(_translate("infoSheet", f"{init.passiveInsi}"))
        self.passiveWisPerc.setText(_translate("infoSheet", f"{init.passivePerc}"))
        self.hitDiceDisplay.setText(_translate("infoSheet", f"{init.lvl}{init.hitDice}"))
        self.profBonusDisplay.setText(_translate("infoSheet", f"+{init.profBonus}"))
    
    def start(self):
        if init.dexMod > -1:
            self.initiativeDisplay.setText(f"+{init.dexMod}")
        if init.background == 'blank':
            self.bgSelect.setCurrentIndex(0)
        if init.background == 'acol':
            self.bgSelect.setCurrentIndex(1)
        if init.background == 'char':
            self.bgSelect.setCurrentIndex(2)
        if init.background == 'crim':
            self.bgSelect.setCurrentIndex(3)
        if init.background == 'ente':
            self.bgSelect.setCurrentIndex(4)
        if init.background == 'folk':
            self.bgSelect.setCurrentIndex(5)
        if init.background == 'guil':
            self.bgSelect.setCurrentIndex(6)
        if init.background == 'herm':
            self.bgSelect.setCurrentIndex(7)
        if init.background == 'nobl':
            self.bgSelect.setCurrentIndex(8)
        if init.background == 'outl':
            self.bgSelect.setCurrentIndex(9)
        if init.background == 'sage':
            self.bgSelect.setCurrentIndex(10)
        if init.background == 'sail':
            self.bgSelect.setCurrentIndex(11)
        if init.background == 'urch':
            self.bgSelect.setCurrentIndex(12)
        self.bgSetup()
        if init.lvlType == 'xp':
            self.levelType.setCurrentIndex(1)
        if init.lvlType == 'lvl':
            self.levelType.setCurrentIndex(2)
        self.lvlTy()
        self.raceLoad()
    
    def saveProfs(self):
        init.toolsProf = self.inpTool.toPlainText()
        init.armourProf = self.inpArmo.toPlainText()
        init.weaponProf = self.inpWeap.toPlainText()
        init.languages = self.inpLang.toPlainText()
    
    def loadProfs(self):
        self.inpTool.setPlainText(f'{init.toolsProf}')
        self.inpArmo.setPlainText(f'{init.armourProf}')
        self.inpWeap.setPlainText(f'{init.weaponProf}')
        self.inpLang.setPlainText(f'{init.languages}')
    
    def bgSetup(self):
        if self.bgSelect.currentText() == 'Select Background':
            self.bgReset()
            init.background = 'blank'
            init.bgLan = 'None'
            init.bgToo = 'None'
        if self.bgSelect.currentText() == 'Acolyte':
            self.bgReset()
            self.bgInfo.append("!!Regardless of your background, talk to your DM about your character and their background to make your character fit as well as possible in your campaign.!!")
            self.bgInfo.append("-----------------------------------")
            self.bgInfo.append("You have spent your life in the service of a temple to a specific god or pantheon of gods. You act as an intermediary between the realm of the holy and the mortal world, performing sacred rites and offering sacrifices in order to conduct worshipers into the presence of the divine. You are not necessarily a cleric - performing sacred rites is not the same thing as channeling divine power. Choose a god, a pantheon of gods, or some other quasi-divine being, and work with your DM to detail the nature of your religious service. Were you a lesser functionary in a temple, raised from childhood to assist the priests in the sacred rites? Or were you a high priest who suddenly experienced a call to serve your god in a different way? Perhaps you were the leader of a small cult outside of any established temple structure, or even an occult group that served a fiendish master that you now deny.")
            self.bgInfo.append("-----------------------------------")
            self.bgInfo.append("Your Starting Equipment: A holy symbol(a gift to you when you entered priesthood), a prayer book or prayer wheel, 5 sticks of incense, vestments, a set of common clothes, and a pouch containing 15gp")
            init.background = 'acol'
            init.insi = True
            init.reli = True
            init.bgLan = 'Pick any 2'
            init.bgToo = 'None'
            self.bgInfo.append("-----------------------------------")
            self.bgInfo.append("!!Scroll to Top!!")
        if self.bgSelect.currentText() == 'Charlatan':
            self.bgReset()
            self.bgInfo.append("!!Regardless of your background, talk to your DM about your character and their background to make your character fit as well as possible in your campaign.!!")
            self.bgInfo.append("-----------------------------------")
            self.bgInfo.append("You have always had a way with people. You know what makes them tick, you can tease out their hearts' desires after a few minutes of conversation, and with a few leading questions you can read them like they were children's books. It's a useful talent, and one that you're perfectly willing to use for your advantage. You know what people want and you deliver, or rather, you promise to deliver. Common sense should steer people away from things that sound too good to be true, but common sesne seems to be in short supply when you're around. The bottle of pink coloured liquid will surely cure that unseemly rash, this ointment - nothing more than a bit of fat with a sprinkle of silver dust, can restore youth and vigor, and there's a bridge in the city that just happens to be for sale. These marvels sound implausible, but you make them sound like the real deal. You may want to talk to the DM about making sure NPCs are fully fleshed as to ensure there are answers to the questions that may come up.")
            self.bgInfo.append("-----------------------------------")
            self.bgInfo.append("Your Starting Equipment: A set of fine clothes, a disguise kit, tools of the con of your choice(ten stoppered bottles filled with coloured liquid, a set of weighted dice, a deck of marked cards, or a signet ring of imaginary duke), and a pouch containing 15gp")
            init.background = 'char'
            init.dece = True
            init.slei = True
            init.bgLan = 'None'
            init.bgToo = 'Disguise Kit, Forgery Kit'
            self.bgInfo.append("-----------------------------------")
            self.bgInfo.append("!!Scroll to Top!!")
        if self.bgSelect.currentText() == 'Criminal':
            self.bgReset()
            self.bgInfo.append("!!Regardless of your background, talk to your DM about your character and their background to make your character fit as well as possible in your campaign.!!")
            self.bgInfo.append("-----------------------------------")
            self.bgInfo.append("You are an experienced criminal with a history of breaking the law. You have spent a lot of time among other criminals and still have contacts within the criminal underworld. You're far closer that most people to the world of murder, theft, and violence that pervades the underbelly of civilisation, and you have survived up to this point by flouting the rules and regulations of society.")
            self.bgInfo.append("-----------------------------------")
            self.bgInfo.append("Your Starting Equipment: A crowbar, a set of dark common clothes including a hood, and a pouch containing 15gp")
            init.background = 'crim'
            init.dece = True
            init.stea = True
            init.bgLan = 'None'
            init.bgToo = "Any Gaming Set(x1), Thieves' Tools"
            self.bgInfo.append("-----------------------------------")
            self.bgInfo.append("!!Scroll to Top!!")
        if self.bgSelect.currentText() == 'Entertainer':
            self.bgReset()
            self.bgInfo.append("!!Regardless of your background, talk to your DM about your character and their background to make your character fit as well as possible in your campaign.!!")
            self.bgInfo.append("-----------------------------------")
            self.bgInfo.append("You thrive in front of an audience. You know how to entrance them, entertain them, and even inspire them. Your poetics can stir the hearts of those who hear you, awakening grief or joy, laughter or anger. Your music raises their spirits or captures their sorrow. Your dance steps captivate, your humor cuts to the quick. Whatever techniques you use, your art is your life. You may want to speak with you DM on what specific type of entertainer you are(circus, musical, theater, ect.) for a more accurate depiction of your character in the campaign.")
            self.bgInfo.append("-----------------------------------")
            self.bgInfo.append("Your Starting Equipment: A musical instrument of your choice, the favour of an admirer(love letter, lock of hair, or trinket), a costume, and a pouch containing 15gp")
            init.background = 'ente'
            init.acro = True
            init.perf = True
            init.bgLan = 'None'
            init.bgToo = 'Disguise Kit, Any Musical Instrument(x1)'
            self.bgInfo.append("-----------------------------------")
            self.bgInfo.append("!!Scroll to Top!!")
        if self.bgSelect.currentText() == 'Folk Hero':
            self.bgReset()
            self.bgInfo.append("!!Regardless of your background, talk to your DM about your character and their background to make your character fit as well as possible in your campaign.!!")
            self.bgInfo.append("-----------------------------------")
            self.bgInfo.append("You come from a humble social rank, but you are destined for so much more. Already the people of your home village regard you as their champion, and your destiny calls you to stand against the tyrants and monsters that threaten the common folk everywhere.")
            self.bgInfo.append("-----------------------------------")
            self.bgInfo.append("Your Starting Equipment: A set of artisan's tools of your choice, a shovel, an iron pot, a set of common clothes, and a pouch containing 10 gp")
            init.background = 'folk'
            init.anim = True
            init.surv = True
            init.bgLan = 'None'
            init.bgToo = "Artisan's Tools, Any Land Vehicle(x1)"
            self.bgInfo.append("-----------------------------------")
            self.bgInfo.append("!!Scroll to Top!!")
        if self.bgSelect.currentText() == 'Guild Artisan':
            self.bgReset()
            self.bgInfo.append("!!Regardless of your background, talk to your DM about your character and their background to make your character fit as well as possible in your campaign.!!")
            self.bgInfo.append("-----------------------------------")
            self.bgInfo.append("You are a member of an artisan's guild, skilled in a particular field closely associated with other artisans. You are a well-established part of the mercantile world, freed by talent and wealth from the constraints of a feudal social order. You learned your skills as an apprentice to a master artisan, under the sponsorship of your guild, until you became a master in your own right.")
            self.bgInfo.append("-----------------------------------")
            self.bgInfo.append("Your Starting Equipment: A set of artisan's tools of your choice, a letter of introduction from your guild, a set of traveler's clothes, and a pouch containing 15gp")
            init.background = 'guil'
            init.insi = True
            init.pers = True
            init.bgLan = 'Pick any 1'
            init.bgToo = "Artisan's Tools(x1)"
            self.bgInfo.append("-----------------------------------")
            self.bgInfo.append("!!Scroll to Top!!")
        if self.bgSelect.currentText() == 'Hermit':
            self.bgReset()
            self.bgInfo.append("!!Regardless of your background, talk to your DM about your character and their background to make your character fit as well as possible in your campaign.!!")
            self.bgInfo.append("-----------------------------------")
            self.bgInfo.append("You lived in selusion - either in a sheltered community such as a monastery, or entirely alone - for a formative part of your life. In your time apart from the clamor of society, you found quiet, solitude, and perhaps some of the answers you were looking for")
            self.bgInfo.append("-----------------------------------")
            self.bgInfo.append("Your Starting Equipment: A scroll case stuffed full of notes from your studies or prayers, a winter blanket, a set of common clothes, an herbalism kit, and 5gp")
            init.background = 'herm'
            init.medi = True
            init.reli = True
            init.bgLan = 'Pick any 1'
            init.bgToo = 'Herbalism Kit'
            self.bgInfo.append("-----------------------------------")
            self.bgInfo.append("!!Scroll to Top!!")
        if self.bgSelect.currentText() == 'Noble':
            self.bgReset()
            self.bgInfo.append("!!Regardless of your background, talk to your DM about your character and their background to make your character fit as well as possible in your campaign.!!")
            self.bgInfo.append("-----------------------------------")
            self.bgInfo.append("You understand wealth, power, and privilege. You carry a noble title, and your family owns land, collects taxes, and wields significant political influence. You might be a pampered aristocrat unfamiliar with work or discomfort, a former merchant just elevated to the nobility, or a disinherited scoundrel with a disproportionate sense of entitlement. Or you could be an honest, hard-working landowner who cares deeply about the people who live and work on your land, keenly aware of your responsibility to them. Work with your DM to come up with an appropriate title and determine how much authority that title carries. A noble title doesn't stand on its own - it's connected to an entire family, and whatever title you hold, you will pass it down to your children. Not only do you need to determine your noble title, but you should also work with the DM to describe your family and their influence on you. Is your family old and established, or was your title only recently bestowed? How much influence do they wield, and over what area? What kind of reputation does your family have among the other aristocrats of the region? How do the common people regard them? What's your position in the family? Are you the heir to the head of the family? Have you already inherited the title? How do you feel about that responsibility? Or are you so far down the line of inheritance that no one cares what you do, as long as you don't embarrass the family? How does the head of your family feel about your adventuring career? Are you in your family's good graces, or shunned by the rest of your family? Does your family have a coat of arms? An insignia you might wear on a signet ring? Particular colours you wear all the time? An animal you regard as a symbol of your line or even a spiritual member of the family? These details help establish your family and your title as features of the world of the campaign.")
            self.bgInfo.append("-----------------------------------")
            self.bgInfo.append("Your Starting Equipment: A set of fine clothes, a signet ring, a scroll of pedigree, and a purse containing 25gp")
            init.background = 'nobl'
            init.hist = True
            init.pers = True
            init.bgLan = 'Pick any 1'
            init.bgToo = 'Any Gaming Set(x1)'
            self.bgInfo.append("-----------------------------------")
            self.bgInfo.append("!!Scroll to Top!!")
        if self.bgSelect.currentText() == 'Outlander':
            self.bgReset()
            self.bgInfo.append("!!Regardless of your background, talk to your DM about your character and their background to make your character fit as well as possible in your campaign.!!")
            self.bgInfo.append("-----------------------------------")
            self.bgInfo.append("You grew up in the wilds, far from civilisation and the comforts of town and technology. You've witnessed the migration of herds larger than forests, survived weather more extreme than any city-dweller could comprehend, and enjoyed the solitude of being the only thinking creature for miles in any direction. The wilds are in your blood, whether you were a nomad, an explorer, a recluse, a hunter-gatherer, or even a marauder. Even in places where you don't know the specific features of the terrain, you know the ways of the wild.")
            self.bgInfo.append("-----------------------------------")
            self.bgInfo.append("Your Starting Equipment: A staff, a hunting trap, a trophy from an animal you killed, a set of traveler's clothes, and a pouch containing 10gp")
            init.background = 'outl'
            init.athl = True
            init.surv = True
            init.bgLan = 'Pick any 1'
            init.bgToo = 'Any Musical Instrument(x1)'
            self.bgInfo.append("-----------------------------------")
            self.bgInfo.append("!!Scroll to Top!!")
        if self.bgSelect.currentText() == 'Sage':
            self.bgReset()
            self.bgInfo.append("!!Regardless of your background, talk to your DM about your character and their background to make your character fit as well as possible in your campaign.!!")
            self.bgInfo.append("-----------------------------------")
            self.bgInfo.append("You spent years learning the lore of the multiverse. You scoured manuscripts, studied scrolls, and listened to the greatest experts on the subjects that interest you. Your efforts have made you a master in your fields of study. You may roll a d8 or otherwise choose a specialty between Alchemist, Astronomer, Discredited Academic, Librarian, Professor, Researcher, Wizard's Apprentice, or Scribe.")
            self.bgInfo.append("-----------------------------------")
            self.bgInfo.append("Your Starting Equipment: A bottle of ink, a quill, a small knife, a letter from a dead colleague posing a question you have not yet been able to answer a set of common clothes, and a pouch of gold conatining 10gp")
            init.background = 'sage'
            init.arca = True
            init.hist = True
            init.bgLan = 'Pick any 2'
            init.bgToo = 'None'
            self.bgInfo.append("-----------------------------------")
            self.bgInfo.append("!!Scroll to Top!!")
        if self.bgSelect.currentText() == 'Sailor':
            self.bgReset()
            self.bgInfo.append("!!Regardless of your background, talk to your DM about your character and their background to make your character fit as well as possible in your campaign.!!")
            self.bgInfo.append("-----------------------------------")
            self.bgInfo.append("You sailed on a seagoing vessel for years. In that time, you faced down mighty storms, monsters of the deep, and those who wanted to sink your craft to the bottomless depths. Your first love is the distant line of the horizon, but the time has come to try your hand at something new. Discuss the nature of the ship you previously sailed with your DM. Was it a merchant ship, a naval vessel, a ship of discovery, or a pirate ship? How famous(or infamous) is it? Is it widely traveled? Is it still sailing, or is it missing and presumed lost with all hands? What were your duties on board - boatswain, captain, navigator, cook, or some other position? Who were the captain and first mate? Did you leave your ship on good terms with your fellows, or on the run?")
            self.bgInfo.append("-----------------------------------")
            self.bgInfo.append("Your Starting Equipment: A belaying pin(improvised club), 50 feet of silk rope, a lucky charm such as a rabbit foot or small stone with a hole in the center(or you may roll for a random trinket on the Trinkets table), a set of common clothes, and a pouch containing 10 gp")
            init.background = 'sail'
            init.athl = True
            init.perc = True
            init.bgLan = 'None'
            init.bgToo = "Navigator's Tools, Any Water Vehicle"
            self.bgInfo.append("-----------------------------------")
            self.bgInfo.append("!!Scroll to Top!!")
        if self.bgSelect.currentText() == 'Urchin':
            self.bgReset()
            self.bgInfo.append("!!Regardless of your background, talk to your DM about your character and their background to make your character fit as well as possible in your campaign.!!")
            self.bgInfo.append("-----------------------------------")
            self.bgInfo.append("You grew up on the streets alone, orphaned, and poor. You had no one to watch over you or to provide for you, so you learned to provide for yourself. You fought fiercely over food and kept a constant watch out for other desperate souls who might steal from you. You slept on rooftops and in alleyways, exposed to the elements, and endured sickness without the advantage of medicine or a place to recuperate. You've survived despite all odds, and did so through cunning, strength, speed, or some combination of each. You begin your adventuring career with enough money to live modestly but securely for at least ten days. How did you come by that money? What allowed you to break free of your desperate circumstances and embark on a better life?")
            self.bgInfo.append("-----------------------------------")
            self.bgInfo.append("Your Starting Equipment: A small knife, a map of the city you grew up in, a pet mouse, a token to remember your parents by, a set of common clothes, and a pouch containing 10 gp")
            init.background = 'urch'
            init.slei = True
            init.stea = True
            init.bgLan = 'None'
            init.bgToo = "Disguise Kit, Thieves' Tools"
            self.bgInfo.append("-----------------------------------")
            self.bgInfo.append("!!Scroll to Top!!")
        self.fixHoles()
    
    def bgReset(self):
        self.bgInfo.clear()
        self.languages.clear()
        self.toolProfs.clear()
        init.acro = False
        init.anim=False
        init.arca=False
        init.athl=False
        init.dece=False
        init.hist=False
        init.insi=False
        init.inti=False
        init.inve=False
        init.medi=False
        init.natu=False
        init.perce=False
        init.perf=False
        init.pers=False
        init.reli=False
        init.slei=False
        init.stea=False
        init.surv=False
        self.fixHoles()
    
    def fixHoles(self):
        self.languages.append(f"Background: {init.bgLan}")
        self.toolProfs.append(f"Background: {init.bgToo}")

    def lvlTy(self):
        if self.levelType.currentText() == 'Lvl Type':
            init.lvlType = 'none'
            self.xpTo.setText('')
        if self.levelType.currentText() == 'XP':
            init.lvlType = 'xp'
            self.levelSystem()
        if self.levelType.currentText() == 'Milestone':
            init.lvlType = 'lvl'
            self.xpTo.setText(f'{init.lvl}/20')

    def levelSystem(self):
        if self.levelType.currentText() == 'XP':
            if init.xp < 0:
                init.xp = 0
                init.lvl = 1
            if init.xp < 300:
                init.lvl = 1
                self.xpTo.setText(f'{init.xp}/300')
            if init.xp > 299 and init.xp < 900:
                init.lvl = 2
                self.xpTo.setText(f'{init.xp}/900')
            if init.xp > 899 and init.xp < 2700:
                init.lvl = 3
                self.xpTo.setText(f'{init.xp}/2700')
            if init.xp > 2699 and init.xp < 6500:
                init.lvl = 4
                self.xpTo.setText(f'{init.xp}/6500')
            if init.xp > 6499 and init.xp < 14000:
                init.lvl = 5
                self.xpTo.setText(f'{init.xp}/14000')
            if init.xp > 13999 and init.xp < 23000:
                init.lvl = 6
                self.xpTo.setText(f'{init.xp}/23000')
            if init.xp > 22999 and init.xp < 34000:
                init.lvl = 7
                self.xpTo.setText(f'{init.xp}/34000')
            if init.xp > 33999 and init.xp < 48000:
                init.lvl = 8
                self.xpTo.setText(f'{init.xp}/48000')
            if init.xp > 47999 and init.xp < 64000:
                init.lvl = 9
                self.xpTo.setText(f'{init.xp}/64000')
            if init.xp > 63999 and init.xp < 85000:
                init.lvl = 10
                self.xpTo.setText(f'{init.xp}/85000')
            if init.xp > 84999 and init.xp < 100000:
                init.lvl = 11
                self.xpTo.setText(f'{init.xp}/100000')
            if init.xp > 99999 and init.xp < 120000:
                init.lvl = 12
                self.xpTo.setText(f'{init.xp}/120000')
            if init.xp > 119999 and init.xp < 140000:
                init.lvl = 13
                self.xpTo.setText(f'{init.xp}/140000')
            if init.xp > 139999 and init.xp < 165000:
                init.lvl = 14
                self.xpTo.setText(f'{init.xp}/165000')
            if init.xp > 164999 and init.xp < 195000:
                init.lvl = 15
                self.xpTo.setText(f'{init.xp}/195000')
            if init.xp > 194999 and init.xp < 225000:
                init.lvl = 16
                self.xpTo.setText(f'{init.xp}/225000')
            if init.xp > 224999 and init.xp < 265000:
                init.lvl = 17
                self.xpTo.setText(f'{init.xp}/265000')
            if init.xp > 264999 and init.xp < 305000:
                init.lvl = 18
                self.xpTo.setText(f'{init.xp}/305000')
            if init.xp > 304999 and init.xp < 355000:
                init.lvl = 19
                self.xpTo.setText(f'{init.xp}/355000')
            if init.xp > 354999:
                init.lvl = 20
                if init.xp > 355000:
                    init.xp = 355000
                self.xpTo.setText(f'355000/355000')
        if self.levelType.currentText() == 'Milestone':
            if init.lvl > 20:
                init.lvl = 20
            if init.lvl < 1:
                init.lvl = 1
            self.xpTo.setText(f'{init.lvl}/20')
        self.hitDiceDisplay.setText(f"{init.lvl}{init.hitDice}")
        if init.lvl > 0 and init.lvl < 5:
            init.profBonus = +2
        if init.lvl > 4 and init.lvl < 9:
            init.profBonus = +3
        if init.lvl > 8 and init.lvl < 13:
            init.profBonus = +4
        if init.lvl > 12 and init.lvl < 17:
            init.profBonus = +5
        if init.lvl > 16:
            init.profBonus = +6
    
    def levelButt(self):
        if self.levelType.currentText() == 'XP':
            n = int(self.levelEnter.text())
            init.xp = init.xp + n
            self.levelSystem()
        if self.levelType.currentText() == 'Milestone':
            n = int(self.levelEnter.text())
            init.lvl = init.lvl + n
            self.levelSystem()

    def raceLoad(self):
        if init.race == 'Dragonborn':
            self.raceSenses.clear()
            self.raceSenses.append('Breath Weapon, Damage Resistance')
            self.subraceSelect.clear()
            self.subraceSelect.addItem('Draconic Ancestry')
            self.subraceSelect.addItem('Black - Acid')
            self.subraceSelect.addItem('Blue - Lightning')
            self.subraceSelect.addItem('Brass - Fire')
            self.subraceSelect.addItem('Bronze - Lightning')
            self.subraceSelect.addItem('Copper - Acid')
            self.subraceSelect.addItem('Gold - Fire')
            self.subraceSelect.addItem('Green - Poison')
            self.subraceSelect.addItem('Red - Fire')
            self.subraceSelect.addItem('Silver - Cold')
            self.subraceSelect.addItem('White - Cold')
            self.subraceSelect.addItem('Draconblood')
            self.subraceSelect.addItem('Ravenite')
            self.subraceSelect.addItem('Chromatic Black')
            self.subraceSelect.addItem('Chromatic Blue')
            self.subraceSelect.addItem('Chromatic Green')
            self.subraceSelect.addItem('Chromatic Red')
            self.subraceSelect.addItem('Chromatic White')
            self.subraceSelect.addItem('Metallic Brass')
            self.subraceSelect.addItem('Metallic Bronze')
            self.subraceSelect.addItem('Metallic Copper')
            self.subraceSelect.addItem('Metallic Gold')
            self.subraceSelect.addItem('Metallic Silver')
            self.subraceSelect.addItem('Amethyst - Force')
            self.subraceSelect.addItem('Crystal - Radiant')
            self.subraceSelect.addItem('Emerald - Psychic')
            self.subraceSelect.addItem('Sapphire - Thunder')
            self.subraceSelect.addItem('Topaz - Necrotic')
        if init.race == 'Dwarf':
            self.raceSenses.clear()
            self.raceSenses.append('Darkvision(120), Dwarven Resilience, Dwarven Combat, Training, Stonecutting')
            self.subraceSelect.clear()
            self.subraceSelect.addItem('Dwarven Lineage')
            self.subraceSelect.addItem('Hill Dwarf')
            self.subraceSelect.addItem('Mountain Dwarf')
            self.subraceSelect.addItem('Duergar')
        if init.race == 'Elf':
            self.raceSenses.clear()
            self.raceSenses.append('Darkvision(60), Keen Senses, Fey Ancestry')
            self.subraceSelect.clear()
            self.subraceSelect.addItem('Fey Ancestry')
            self.subraceSelect.addItem('Dark Elf')
            self.subraceSelect.addItem('High Elf')
            self.subraceSelect.addItem('Wood Elf')
            self.subraceSelect.addItem('Pallid Elf')
            self.subraceSelect.addItem('Mark of Shadow')
            self.subraceSelect.addItem('Astral Elf')
            self.subraceSelect.addItem('Bistahar Elf')
            self.subraceSelect.addItem('Tirahar Elf')
            self.subraceSelect.addItem('Vahadar Elf')
            self.subraceSelect.addItem('Zendikar')
            self.subraceSelect.addItem('Tajuru')
            self.subraceSelect.addItem('Juraga')
            self.subraceSelect.addItem('Mul Daya')
            self.subraceSelect.addItem('Avariel Elf')
            self.subraceSelect.addItem('Grugach Elf')
        if init.race == 'Gnome':
            self.raceSenses.clear()
            self.raceSenses.append('Small, Darkvision(60), Gnome Cunning')
            self.subraceSelect.clear()
            self.subraceSelect.addItem('Gnome Lineage')
            self.subraceSelect.addItem('Forest')
            self.subraceSelect.addItem('Rock')
            self.subraceSelect.addItem('Mark of Scribing')
        if init.race == 'Halfling':
            self.raceSenses.clear()
            self.raceSenses.append('Lucky, Brave, Nimbleness')
            self.subraceSelect.clear()
            self.subraceSelect.addItem('Halfling Lineage')
            self.subraceSelect.addItem('Lightfoot')
            self.subraceSelect.addItem('Stout')
            self.subraceSelect.addItem('Ghostwise')
            self.subraceSelect.addItem('Lotusden')
            self.subraceSelect.addItem('Mark of Hospitality')
            self.subraceSelect.addItem('Mark of Healing')
        if init.race == 'Half-Elf':
            self.raceSenses.clear()
            self.raceSenses.append('Darkvision(60), Fey Ancestry, Skill Versatility')
            self.subraceSelect.clear()
            self.subraceSelect.addItem('Half-Elf Marks')
            self.subraceSelect.addItem('Mark of Detection')
            self.subraceSelect.addItem('Mark of Storm')
        if init.race == 'Half-Orc':
            self.raceSenses.clear()
            self.raceSenses.append('Darkvision(60), Menacing, Reletless Endurance, Savage Attacks')
            self.subraceSelect.clear()
            self.subraceSelect.addItem('Half-Orc Marks')
            self.subraceSelect.addItem('Mark of Finding')
        if init.race == 'Human':
            self.raceSenses.clear()
            self.raceSenses.append('None')
            self.subraceSelect.clear()
            self.subraceSelect.addItem('Human Lineage')
            self.subraceSelect.addItem('Mark of Finding')
            self.subraceSelect.addItem('Mark of Handling')
            self.subraceSelect.addItem('Mark of Making')
            self.subraceSelect.addItem('Mark of Passage')
            self.subraceSelect.addItem('Mark of Sentinel')
            self.subraceSelect.addItem('Keldon')
            self.subraceSelect.addItem('Gavony')
            self.subraceSelect.addItem('Kessig')
            self.subraceSelect.addItem('Nephalia')
            self.subraceSelect.addItem('Stensia')
        if init.race == 'Tiefling':
            self.raceSenses.clear()
            self.raceSenses.append('Darkvision(60), Hellish Resistance, Infernal Legacy')
            self.subraceSelect.clear()
            self.subraceSelect.addItem('Tiefling Bloodlines')
            self.subraceSelect.addItem('Asmodeus')
            self.subraceSelect.addItem('Baalzebul')
            self.subraceSelect.addItem('Dispater')
            self.subraceSelect.addItem('Fierna')
            self.subraceSelect.addItem('Glasya')
            self.subraceSelect.addItem('Levistus')
            self.subraceSelect.addItem('Mammon')
            self.subraceSelect.addItem('Mephistopheles')
            self.subraceSelect.addItem('Zariel')
            self.subraceSelect.addItem('Variant Tiefling')
            self.subraceSelect.addItem('Abyssal Tiefling')

    def subraceFunctions(self):
        if self.subraceSelect.currentText() == 'Draconic Ancestory' or self.subraceSelect.currentText() == 'Dwarven Lineage' or self.subraceSelect.currentText() == 'Gnome Lineage' or self.subraceSelect.currentText() == 'Fey Ancestory' or self.subraceSelect.currentText() == 'Halfling Lineage' or self.subraceSelect.currentText() == 'Half-Elf Marks' or self.subraceSelect.currentText() == 'Half-Orc Marks' or self.subraceSelect.currentText() == 'Human Lineage' or self.subraceSelect.currentText() == 'Tiefling Bloodlines':
            self.raceLoad()
            self.perksLoad()
        if self.subraceSelect.currentText() == 'Black - Acid' or self.subraceSelect.currentText() == 'Chromatic Black':
            self.raceSenses.clear()
            self.raceSenses.append('Breath Weapon(Acid, 5 by 30ft line, DEX Save), Damage Resistance')
        if self.subraceSelect.currentText() == 'Blue - Lightning' or self.subraceSelect.currentText() == 'Chromatic Blue':
            self.raceSenses.clear()
            self.raceSenses.append('Breath Weapon(Lightning, 5 by 30ft line, DEX Save), Damage Resistance')
        if self.subraceSelect.currentText() == 'Brass - Fire' or self.subraceSelect.currentText() == 'Metallic Brass':
            self.raceSenses.clear()
            self.raceSenses.append('Breath Weapon(Fire, 5 by 30ft line, DEX Save), Damage Resistance')
        if self.subraceSelect.currentText() == 'Bronze - Lightning' or self.subraceSelect.currentText() == 'Metallic Bronze':
            self.raceSenses.clear()
            self.raceSenses.append('Breath Weapon(Lightning, 5 by 30ft line, DEX Save), Damage Resistance')
        if self.subraceSelect.currentText() == 'Copper - Acid' or self.subraceSelect.currentText() == 'Metallic Copper':
            self.raceSenses.clear()
            self.raceSenses.append('Breath Weapon(Acid, 5 by 30ft line, DEX Save), Damage Resistance')
        if self.subraceSelect.currentText() == 'Gold - Fire' or self.subraceSelect.currentText() == 'Metallic Gold':
            self.raceSenses.clear()
            self.raceSenses.append('Breath Weapon(Fire, 15ft cone, DEX Save), Damage Resistance')
        if self.subraceSelect.currentText() == 'Green - Poison' or self.subraceSelect.currentText() == 'Chromatic Green':
            self.raceSenses.clear()
            self.raceSenses.append('Breath Weapon(Poison, 15ft cone, CON Save), Damage Resistance')
        if self.subraceSelect.currentText() == 'Red - Fire' or self.subraceSelect.currentText() == 'Chromatic Red':
            self.raceSenses.clear()
            self.raceSenses.append('Breath Weapon(Fire, 15ft cone, DEX Save), Damage Resistance')
        if self.subraceSelect.currentText() == 'Silver - Cold' or self.subraceSelect.currentText() == 'Metallic Silver':
            self.raceSenses.clear()
            self.raceSenses.append('Breath Weapon(Cold, 15ft cone, CON Save), Damage Resistance')
        if self.subraceSelect.currentText() == 'White - Cold' or self.subraceSelect.currentText() == 'Chromatic White':
            self.raceSenses.clear()
            self.raceSenses.append('Breath Weapon(Cold, 15ft cone, CON Save), Damage Resistance')
        if self.subraceSelect.currentText() == 'Amethyst - Force':
            self.raceSenses.clear()
            self.raceSenses.append('Breath Weapon(Force, 15ft cone, DEX Save), Damage Resistance')
        if self.subraceSelect.currentText() == 'Crystal - Radiant':
            self.raceSenses.clear()
            self.raceSenses.append('Breath Weapon(Radiant, 15ft cone, DEX Save), Damage Resistance')
        if self.subraceSelect.currentText() == 'Emerald - Psychic':
            self.raceSenses.clear()
            self.raceSenses.append('Breath Weapon(Psychic, 15ft cone, DEX Save), Damage Resistance')
        if self.subraceSelect.currentText() == 'Sapphire - Thunder':
            self.raceSenses.clear()
            self.raceSenses.append('Breath Weapon(Thunder, 15ft cone, DEX Save), Damage Resistance')
        if self.subraceSelect.currentText() == 'Topaz - Necrotic':
            self.raceSenses.clear()
            self.raceSenses.append('Breath Weapon(Necrotic, 15ft cone, DEX Save), Damage Resistance')

    def perksLoad(self):
        self.perksDisplay.clear()
        #race perks
        if init.race == 'Dragonborn':
            self.perksDisplay.append('Born of dragons, as their name proclaims, the dragonborn walk proudly through a world that greets them with fearful incomprehension. Shaped by draconic gods or the dragons themselves, dragonborn originally hatched from dragon eggs as a unique race, combining the best attributes of dragons and humanoids. Some dragonborn are faithful servants to true dragons, others form the ranks of soldiers in great wars, and still others find themselves adrift, with no clear calling in life.')
            self.perksDisplay.append('Ability Score Increase : Your Strength score increases by 2, and your Charisma score increases by 1')
            self.perksDisplay.append('Age : Young dragonborn grow quickly. They walk hours after hatching, attain the size and development of a 10=year-old human child by the age of 3, and reach adulthood by 15. They live to be around 80')
            self.perksDisplay.append('Alignment : Dragonborn tend towards extremes, making a conscious choice for one side or the other between Good and Evil(represented by Bahamut and Tiamat, respectively). More side with Bahamut than Tiamat(whose non-dragon followers are mostly kobolds), but villainous dragonborn can be quite terrible indeed. Some rare few choose to devote themselves to lesser dragon deities, such as Chronepsis(Neutral), and fewer still choose to worship Io, the Ninefold Dragon, who is all alignments at once.')
            self.perksDisplay.append('Size : Dragonborn are taller and heavier than humans, standing well over 6 feet tall and averaging 250 pounds. Your size is Medium')
            self.perksDisplay.append('Speed : Your base walking speed is 30 feet')
            self.perksDisplay.append('Draconic Ancestry :  You are distantly related to a particular kind of dragon. Choose a type of dragon, this determines the damage and area of your breath weapon, and the type of resistance you gain')
            self.perksDisplay.append('Breath Weapon : You can use your action to exhale destructive energy. It deals damage in an area according to your ancestry. When you use your breath weapon, all creatures in the area must make a saving throw, the type is determined by your ancestry. The DC of this saving throw is 8 + your Constitution modifier + your proficiency bonus. A creature takes 2d6 damage on a failed save, and half as much damage on a successful one. The damage increase to 3d6 at 6th level, 4d6 at 11th, and 5d6 at 16th level. After using your breath weapon, you cannot use it again until you complete a short or long rest.')
            self.perksDisplay.append('Damage Resistance : You have resistance to the damage type associated with your ancestry.')
            self.perksDisplay.append('Languages : You can read, speak, and write Common and Draconic')
        #subrace perks
        #class perks
        #level up perks
        pass
    
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    infoSheet = QtWidgets.QMainWindow()
    ui = Ui_infoSheet()
    ui.setupUi(infoSheet)
    infoSheet.show()
    sys.exit(app.exec_())
